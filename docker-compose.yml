services:
  db:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 20
    networks:
      - api_db
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro

  api:
    build:
      context: ./api
    environment:
      APP_DB_URL: ${APP_DB_URL}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - api_db
    ports:
      - "8000:8000"

  db_seed:
    image: postgres:16
    profiles: ["ops"]
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - api_db
    volumes:
      - ./db/init:/docker-entrypoint-initdb.d:ro
    entrypoint: ["bash","-lc","psql -h db -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\" -v ON_ERROR_STOP=1 -f /docker-entrypoint-initdb.d/02_seed_contactos.sql"]
    restart: "no"

  db_migrate:
    image: postgres:16
    profiles: ["ops"]
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - api_db
    volumes:
      - ./db/init:/docker-entrypoint-initdb.d:ro
    entrypoint: ["bash","-lc","psql -h db -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\" -v ON_ERROR_STOP=1 -f /docker-entrypoint-initdb.d/03_modelo_normalizado_contactos.sql"]
    restart: "no"

networks:
  api_db:
    driver: bridge

volumes:
  db_data:
