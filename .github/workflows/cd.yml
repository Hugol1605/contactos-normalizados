name: CD

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: ["main"]

permissions:
  contents: read
  packages: read

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute image ref
        id: meta
        run: |
          SHA=${{ github.sha }}
          echo "image=ghcr.io/${{ github.repository_owner }}/contactos-api:${SHA::12}" >> $GITHUB_OUTPUT

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Copy deployment files
        run: |
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" deploy/ ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ secrets.DEPLOY_PATH }}/
          # escribe .env con la imagen a desplegar
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "mkdir -p ${{ secrets.DEPLOY_PATH }} && echo API_IMAGE=${{ steps.meta.outputs.image }} > ${{ secrets.DEPLOY_PATH }}/.env"

      - name: Deploy over SSH
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOSSH'
            set -euo pipefail
            cd ${{ secrets.DEPLOY_PATH }}
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            docker compose -f docker-compose.prod.yml pull api || true
            docker compose -f docker-compose.prod.yml up -d db
            # espera DB healthy
            for i in $(seq 1 60); do
              if docker inspect --format='{{json .State.Health.Status}}' $(docker compose -f docker-compose.prod.yml ps -q db) | grep -q healthy; then
                echo "DB healthy"; break
              fi
              echo "esperando DB..."; sleep 2
            done
            # opcional: correr bootstrap/migraciones si existe el servicio
            if docker compose -f docker-compose.prod.yml config --services | grep -q db_bootstrap; then
              docker compose -f docker-compose.prod.yml --profile ops up -d db_bootstrap
              # esperar a que termine
              for i in $(seq 1 60); do
                s=$(docker compose -f docker-compose.prod.yml ps -q db_bootstrap | xargs -r docker inspect --format='{{.State.Status}}' || echo "")
                if [ "$s" = "exited" ]; then echo "db_bootstrap done"; break; fi
                echo "esperando db_bootstrap..."; sleep 2
              done
            fi
            docker compose -f docker-compose.prod.yml up -d api
            curl -sf http://localhost:8000/health || (docker compose -f docker-compose.prod.yml logs api && false)
          EOSSH
