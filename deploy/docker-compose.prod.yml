services:
  db:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-app_password}
      POSTGRES_DB: ${POSTGRES_DB:-challenge}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 20
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
    networks: [app_net]

  # job opcional para ejecutar 01->02->validate->03 bajo demanda
  db_bootstrap:
    image: postgres:16
    depends_on:
      db:
        condition: service_healthy
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-app_password}
      POSTGRES_DB: ${POSTGRES_DB:-challenge}
    volumes:
      - ./db/init:/docker-entrypoint-initdb.d:ro
    command: >
      bash -lc '
        set -euo pipefail;
        export PGPASSWORD="$POSTGRES_PASSWORD";
        psql -v ON_ERROR_STOP=1 -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f /docker-entrypoint-initdb.d/01_init.sql;
        if [ -x /docker-entrypoint-initdb.d/02_seed_contactos.sh ]; then
          bash /docker-entrypoint-initdb.d/02_seed_contactos.sh;
        fi;
        psql -v ON_ERROR_STOP=1 -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f /docker-entrypoint-initdb.d/02_validate_state.sql;
        psql -v ON_ERROR_STOP=1 -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f /docker-entrypoint-initdb.d/03_modelo_normalizado_contactos.sql;
      '
    restart: "no"
    networks: [app_net]
    profiles: ["ops"]

  api:
    image: ${API_IMAGE:-ghcr.io/owner/contactos-api:latest}
    restart: always
    environment:
      APP_DB_URL: postgresql://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD:-app_password}@db:5432/${POSTGRES_DB:-challenge}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks: [app_net]

networks:
  app_net:
    driver: bridge

volumes:
  db_data:
